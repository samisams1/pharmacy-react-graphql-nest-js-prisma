"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TssCacheProvider = exports.useTssEmotionCache = exports.getTssDefaultEmotionCache = exports.getDoExistsTssDefaultEmotionCacheMemoizedValue = void 0;
const react_1 = __importStar(require("react"));
const cache_1 = __importDefault(require("@emotion/cache"));
const { getDoExistsTssDefaultEmotionCacheMemoizedValue, getTssDefaultEmotionCache, reactContext, } = (() => {
    const propertyKey = "__tss-react_context";
    const peerDepObj = 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    react_1.createContext;
    let sharedContext = peerDepObj["__tss-react_context"];
    if (sharedContext === undefined) {
        const { getTssDefaultEmotionCache, getDoExistsTssDefaultEmotionCacheMemoizedValue, } = (() => {
            let cache = undefined;
            /**
             * Lazily initialized singleton
             * If doReset is set to true the memoized instance will be
             * discarded and a new one created.
             * */
            function getTssDefaultEmotionCache(params) {
                const { doReset = false } = params !== null && params !== void 0 ? params : {};
                if (doReset) {
                    cache = undefined;
                }
                if (cache === undefined) {
                    cache = (0, cache_1.default)({ "key": "tss" });
                }
                return cache;
            }
            return {
                getTssDefaultEmotionCache,
                "getDoExistsTssDefaultEmotionCacheMemoizedValue": () => cache !== undefined,
            };
        })();
        sharedContext = {
            getTssDefaultEmotionCache,
            getDoExistsTssDefaultEmotionCacheMemoizedValue,
            "reactContext": (0, react_1.createContext)(undefined),
        };
        Object.defineProperty(peerDepObj, propertyKey, {
            "configurable": false,
            "enumerable": false,
            "writable": false,
            "value": sharedContext,
        });
    }
    return sharedContext;
})();
exports.getDoExistsTssDefaultEmotionCacheMemoizedValue = getDoExistsTssDefaultEmotionCacheMemoizedValue;
exports.getTssDefaultEmotionCache = getTssDefaultEmotionCache;
function useTssEmotionCache() {
    const cacheExplicitlyProvidedForTss = (0, react_1.useContext)(reactContext);
    return cacheExplicitlyProvidedForTss !== null && cacheExplicitlyProvidedForTss !== void 0 ? cacheExplicitlyProvidedForTss : getTssDefaultEmotionCache();
}
exports.useTssEmotionCache = useTssEmotionCache;
function TssCacheProvider(props) {
    const { children, value } = props;
    return (react_1.default.createElement(reactContext.Provider, { value: value }, children));
}
exports.TssCacheProvider = TssCacheProvider;
