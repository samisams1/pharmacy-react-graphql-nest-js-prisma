{"version":3,"file":"nivo-geo.es.js","sources":["../src/hooks.js","../src/ChoroplethTooltip.js","../src/props.js","../src/GeoGraticule.js","../src/GeoMapFeature.js","../src/GeoMap.js","../src/ResponsiveGeoMap.js","../src/GeoMapCanvas.js","../src/ResponsiveGeoMapCanvas.js","../src/Choropleth.js","../src/ResponsiveChoropleth.js","../src/ChoroplethCanvas.js","../src/ResponsiveChoroplethCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport { isFunction, get } from 'lodash'\nimport { format } from 'd3-format'\nimport {\n    geoPath,\n    geoAzimuthalEqualArea,\n    geoAzimuthalEquidistant,\n    geoGnomonic,\n    geoOrthographic,\n    geoStereographic,\n    geoEqualEarth,\n    geoEquirectangular,\n    geoMercator,\n    geoTransverseMercator,\n    geoNaturalEarth1,\n    geoGraticule,\n} from 'd3-geo'\nimport { guessQuantizeColorScale, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useQuantizeColorScaleLegendData } from '@nivo/legends'\n\nexport const projectionById = {\n    azimuthalEqualArea: geoAzimuthalEqualArea,\n    azimuthalEquidistant: geoAzimuthalEquidistant,\n    gnomonic: geoGnomonic,\n    orthographic: geoOrthographic,\n    stereographic: geoStereographic,\n    equalEarth: geoEqualEarth,\n    equirectangular: geoEquirectangular,\n    mercator: geoMercator,\n    transverseMercator: geoTransverseMercator,\n    naturalEarth1: geoNaturalEarth1,\n}\n\nexport const useGeoMap = ({\n    width,\n    height,\n    projectionType,\n    projectionScale,\n    projectionTranslation,\n    projectionRotation,\n    fillColor,\n    borderWidth,\n    borderColor,\n}) => {\n    const projection = useMemo(() => {\n        return projectionById[projectionType]()\n            .scale(projectionScale)\n            .translate([width * projectionTranslation[0], height * projectionTranslation[1]])\n            .rotate(projectionRotation)\n    }, [\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation[0],\n        projectionTranslation[1],\n        projectionRotation[0],\n        projectionRotation[1],\n        projectionRotation[2],\n    ])\n    const path = useMemo(() => geoPath(projection), [projection])\n    const graticule = useMemo(() => geoGraticule())\n\n    const theme = useTheme()\n    const getBorderWidth = useMemo(\n        () => (typeof borderWidth === 'function' ? borderWidth : () => borderWidth),\n        [borderWidth]\n    )\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getFillColor = useMemo(\n        () => (typeof fillColor === 'function' ? fillColor : () => fillColor),\n        [fillColor]\n    )\n\n    return {\n        projection,\n        path,\n        graticule,\n        getBorderWidth,\n        getBorderColor,\n        getFillColor,\n    }\n}\n\nexport const useChoropleth = ({\n    features,\n    data,\n    match,\n    label,\n    value,\n    valueFormat,\n    colors,\n    unknownColor,\n    domain,\n}) => {\n    const findMatchingDatum = useMemo(() => {\n        if (isFunction(match)) return match\n        return (feature, datum) => {\n            const featureKey = get(feature, match)\n            const datumKey = get(datum, match)\n\n            return featureKey && featureKey === datumKey\n        }\n    }, [match])\n    const getLabel = useMemo(\n        () => (isFunction(label) ? label : datum => get(datum, label)),\n        [label]\n    )\n    const getValue = useMemo(\n        () => (isFunction(value) ? value : datum => get(datum, value)),\n        [value]\n    )\n    const valueFormatter = useMemo(() => {\n        if (valueFormat === undefined) return d => d\n        if (isFunction(valueFormat)) return valueFormat\n        return format(valueFormat)\n    }, [valueFormat])\n\n    const colorScale = useMemo(\n        () => guessQuantizeColorScale(colors).domain(domain),\n        [colors, domain]\n    )\n    const getFillColor = useMemo(() => {\n        return feature => {\n            if (feature.value === undefined) return unknownColor\n            return colorScale(feature.value)\n        }\n    }, [colorScale, unknownColor])\n\n    const boundFeatures = useMemo(\n        () =>\n            features.map(feature => {\n                const datum = data.find(datum => findMatchingDatum(feature, datum))\n                const datumValue = getValue(datum)\n\n                if (datum) {\n                    const featureWithData = {\n                        ...feature,\n                        data: datum,\n                        value: datumValue,\n                        formattedValue: valueFormatter(datumValue),\n                    }\n                    featureWithData.color = getFillColor(featureWithData)\n                    featureWithData.label = getLabel(featureWithData)\n\n                    return featureWithData\n                }\n\n                return feature\n            }),\n        [features, data, findMatchingDatum, getValue, valueFormatter, getFillColor]\n    )\n\n    const legendData = useQuantizeColorScaleLegendData({\n        scale: colorScale,\n        valueFormat: valueFormatter,\n    })\n\n    return {\n        colorScale,\n        getFillColor,\n        boundFeatures,\n        valueFormatter,\n        legendData,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst ChoroplethTooltip = memo(({ feature }) => {\n    if (feature.data === undefined) return null\n\n    return (\n        <BasicTooltip\n            id={feature.label}\n            color={feature.color}\n            enableChip={true}\n            value={feature.formattedValue}\n        />\n    )\n})\n\nChoroplethTooltip.propTypes = {\n    feature: PropTypes.object.isRequired,\n}\n\nChoroplethTooltip.displayName = 'ChoroplethTooltip'\n\nexport default ChoroplethTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { quantizeColorScalePropType } from '@nivo/core'\nimport { inheritedColorPropType } from '@nivo/colors'\nimport { projectionById } from './hooks'\nimport ChoroplethTooltip from './ChoroplethTooltip'\n\nconst commonPropTypes = {\n    features: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            type: PropTypes.oneOf(['Feature']).isRequired,\n            properties: PropTypes.object,\n            geometry: PropTypes.object.isRequired,\n        })\n    ).isRequired,\n\n    projectionType: PropTypes.oneOf(Object.keys(projectionById)).isRequired,\n    projectionScale: PropTypes.number.isRequired,\n    projectionTranslation: PropTypes.arrayOf(PropTypes.number).isRequired,\n    projectionRotation: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n    fillColor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    borderWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n\n    enableGraticule: PropTypes.bool.isRequired,\n    graticuleLineWidth: PropTypes.number.isRequired,\n    graticuleLineColor: PropTypes.string.isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n    tooltip: PropTypes.any,\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const GeoMapPropTypes = {\n    ...commonPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const GeoMapCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonChoroplethPropTypes = {\n    data: PropTypes.arrayOf(PropTypes.object).isRequired,\n    match: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    valueFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    colors: quantizeColorScalePropType.isRequired,\n    domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n    unknownColor: PropTypes.string.isRequired,\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.oneOf(['graticule', 'features', 'legends']), PropTypes.func])\n    ).isRequired,\n}\n\nexport const ChoroplethPropTypes = {\n    ...GeoMapPropTypes,\n    ...commonChoroplethPropTypes,\n    role: PropTypes.string.isRequired,\n}\n\nexport const ChoroplethCanvasPropTypes = {\n    ...GeoMapCanvasPropTypes,\n    ...commonChoroplethPropTypes,\n}\n\nconst commonDefaultProps = {\n    projectionType: 'mercator',\n    projectionScale: 100,\n    projectionTranslation: [0.5, 0.5],\n    projectionRotation: [0, 0, 0],\n\n    enableGraticule: false,\n    graticuleLineWidth: 0.5,\n    graticuleLineColor: '#999999',\n\n    fillColor: '#dddddd',\n    borderWidth: 0,\n    borderColor: '#000000',\n\n    isInteractive: true,\n    onMouseEnter: () => {},\n    onMouseLeave: () => {},\n    onMouseMove: () => {},\n    onClick: () => {},\n\n    layers: ['graticule', 'features'],\n    legends: [],\n\n    fill: [],\n    defs: [],\n}\n\nexport const GeoMapDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n}\n\nexport const GeoMapCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n\nconst commonChoroplethDefaultProps = {\n    match: 'id',\n    label: 'id',\n    value: 'value',\n    colors: 'PuBuGn',\n    unknownColor: '#999',\n    tooltip: ChoroplethTooltip,\n    layers: ['graticule', 'features', 'legends'],\n}\n\nexport const ChoroplethDefaultProps = {\n    ...GeoMapDefaultProps,\n    ...commonChoroplethDefaultProps,\n    role: 'img',\n}\n\nexport const ChoroplethCanvasDefaultProps = {\n    ...GeoMapCanvasDefaultProps,\n    ...commonChoroplethDefaultProps,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoGraticule = memo(({ path, graticule, lineWidth, lineColor }) => {\n    return <path fill=\"none\" strokeWidth={lineWidth} stroke={lineColor} d={path(graticule())} />\n})\n\nGeoGraticule.propTypes = {\n    path: PropTypes.func.isRequired,\n    graticule: PropTypes.func.isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineColor: PropTypes.string.isRequired,\n}\n\nGeoGraticule.displayName = 'GeoGraticule'\n\nexport default GeoGraticule\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GeoMapFeature = memo(\n    ({\n        feature,\n        path,\n        fillColor,\n        borderWidth,\n        borderColor,\n        onClick,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n    }) => {\n        return (\n            <path\n                key={feature.id}\n                fill={feature?.fill ?? fillColor}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                strokeLinejoin=\"bevel\"\n                d={path(feature)}\n                onMouseEnter={event => onMouseEnter(feature, event)}\n                onMouseMove={event => onMouseMove(feature, event)}\n                onMouseLeave={event => onMouseLeave(feature, event)}\n                onClick={event => onClick(feature, event)}\n            />\n        )\n    }\n)\n\nGeoMapFeature.propTypes = {\n    feature: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        type: PropTypes.oneOf(['Feature']).isRequired,\n        properties: PropTypes.object,\n        geometry: PropTypes.object.isRequired,\n    }).isRequired,\n    path: PropTypes.func.isRequired,\n\n    fillColor: PropTypes.string.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n\n    onMouseEnter: PropTypes.func.isRequired,\n    onMouseMove: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nGeoMapFeature.displayName = 'GeoMapFeature'\n\nexport default GeoMapFeature\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useCallback, memo } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapPropTypes, GeoMapDefaultProps } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap } from './hooks'\n\nconst GeoMap = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        layers,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        isInteractive,\n        onClick,\n        tooltip: Tooltip,\n        role,\n    } = props\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap({\n        width,\n        height,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        fillColor,\n        borderWidth,\n        borderColor,\n    })\n\n    const theme = useTheme()\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleClick = useCallback(\n        (feature, event) => isInteractive && onClick && onClick(feature, event),\n        [isInteractive, onClick]\n    )\n    const handleMouseEnter = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseMove = useCallback(\n        (feature, event) =>\n            isInteractive && Tooltip && showTooltipFromEvent(<Tooltip feature={feature} />, event),\n        [isInteractive, showTooltipFromEvent, Tooltip]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            theme={theme}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layer === 'graticule') {\n                    if (enableGraticule !== true) return null\n\n                    return (\n                        <GeoGraticule\n                            key=\"graticule\"\n                            path={path}\n                            graticule={graticule}\n                            lineWidth={graticuleLineWidth}\n                            lineColor={graticuleLineColor}\n                        />\n                    )\n                }\n                if (layer === 'features') {\n                    return (\n                        <Fragment key=\"features\">\n                            {features.map(feature => (\n                                <GeoMapFeature\n                                    key={feature.id}\n                                    feature={feature}\n                                    path={path}\n                                    fillColor={getFillColor(feature)}\n                                    borderWidth={getBorderWidth(feature)}\n                                    borderColor={getBorderColor(feature)}\n                                    onMouseEnter={handleMouseEnter}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseLeave={handleMouseLeave}\n                                    onClick={handleClick}\n                                />\n                            ))}\n                        </Fragment>\n                    )\n                }\n\n                return <Fragment key={i}>{layer(props)}</Fragment>\n            })}\n        </SvgWrapper>\n    )\n})\n\nGeoMap.displayName = 'GeoMap'\nGeoMap.propTypes = GeoMapPropTypes\nGeoMap.defaultProps = GeoMapDefaultProps\n\nexport default withContainer(GeoMap)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMap from './GeoMap'\n\nconst ResponsiveGeoMap = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMap width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMap\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { GeoMapCanvasDefaultProps, GeoMapCanvasPropTypes } from './props'\nimport { useGeoMap } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst GeoMapCanvas = memo(props => {\n    const {\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n        features,\n        layers,\n\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n\n        fillColor,\n        borderWidth,\n        borderColor,\n\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n\n        isInteractive,\n        onClick,\n        onMouseMove,\n        tooltip: Tooltip,\n    } = props\n\n    const canvasEl = useRef(null)\n    const theme = useTheme()\n    const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n    const { projection, graticule, path, getFillColor, getBorderWidth, getBorderColor } = useGeoMap(\n        {\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor,\n            borderWidth,\n            borderColor,\n        }\n    )\n\n    useEffect(() => {\n        if (!canvasEl) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        path.context(ctx)\n\n        layers.forEach(layer => {\n            if (layer === 'graticule') {\n                if (enableGraticule === true) {\n                    ctx.lineWidth = graticuleLineWidth\n                    ctx.strokeStyle = graticuleLineColor\n                    ctx.beginPath()\n                    path(graticule())\n                    ctx.stroke()\n                }\n            } else if (layer === 'features') {\n                features.forEach(feature => {\n                    ctx.beginPath()\n                    path(feature)\n                    ctx.fillStyle = getFillColor(feature)\n                    ctx.fill()\n\n                    const borderWidth = getBorderWidth(feature)\n                    if (borderWidth > 0) {\n                        ctx.strokeStyle = getBorderColor(feature)\n                        ctx.lineWidth = borderWidth\n                        ctx.stroke()\n                    }\n                })\n            } else {\n                layer(ctx, props)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin,\n        pixelRatio,\n        theme,\n        path,\n        graticule,\n        getFillColor,\n        getBorderWidth,\n        getBorderColor,\n        features,\n        layers,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseMove = useCallback(\n        event => {\n            if (!isInteractive || !Tooltip) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                showTooltipFromEvent(<Tooltip feature={feature} />, event)\n            } else {\n                hideTooltip()\n            }\n            onMouseMove && onMouseMove(feature || null, event)\n        },\n        [showTooltipFromEvent, hideTooltip, isInteractive, Tooltip, canvasEl, features, projection]\n    )\n    const handleMouseLeave = useCallback(\n        () => isInteractive && hideTooltip(),\n        [isInteractive, hideTooltip]\n    )\n    const handleClick = useCallback(\n        event => {\n            if (!isInteractive || !onClick) return\n\n            const feature = getFeatureFromMouseEvent(event, canvasEl.current, features, projection)\n            if (feature) {\n                onClick(feature, event)\n            }\n        },\n        [isInteractive, canvasEl, features, projection, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        />\n    )\n})\n\nGeoMapCanvas.displatName = 'GeoMapCanvas'\nGeoMapCanvas.propTypes = GeoMapCanvasPropTypes\nGeoMapCanvas.defaultProps = GeoMapCanvasDefaultProps\n\nexport default withContainer(GeoMapCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport GeoMapCanvas from './GeoMapCanvas'\n\nconst ResponsiveGeoMapCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <GeoMapCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveGeoMapCanvas\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, Fragment, useCallback } from 'react'\nimport { SvgWrapper, withContainer, useDimensions, useTheme, bindDefs } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethPropTypes, ChoroplethDefaultProps } from './props'\nimport GeoGraticule from './GeoGraticule'\nimport GeoMapFeature from './GeoMapFeature'\nimport { useGeoMap, useChoropleth } from './hooks'\n\nconst Choropleth = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        colors,\n        domain,\n        unknownColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        layers,\n        legends,\n        isInteractive,\n        onClick,\n        tooltip: Tooltip,\n        role,\n        defs = ChoroplethDefaultProps.defs,\n        fill = ChoroplethDefaultProps.fill,\n    }) => {\n        const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n        const { graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor: () => {},\n            borderWidth,\n            borderColor,\n        })\n        const { getFillColor, boundFeatures, legendData } = useChoropleth({\n            features,\n            data,\n            match,\n            label,\n            value,\n            valueFormat,\n            colors,\n            unknownColor,\n            domain,\n        })\n\n        const theme = useTheme()\n\n        const boundDefs = bindDefs(defs, boundFeatures, fill, {\n            dataKey: 'data',\n            targetKey: 'fill',\n        })\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const handleClick = useCallback(\n            (feature, event) => isInteractive && onClick && onClick(feature, event),\n            [isInteractive, onClick]\n        )\n        const handleMouseEnter = useCallback(\n            (feature, event) =>\n                isInteractive &&\n                Tooltip &&\n                showTooltipFromEvent(<Tooltip feature={feature} />, event),\n            [isInteractive, showTooltipFromEvent, Tooltip]\n        )\n        const handleMouseMove = useCallback(\n            (feature, event) =>\n                isInteractive &&\n                Tooltip &&\n                showTooltipFromEvent(<Tooltip feature={feature} />, event),\n            [isInteractive, showTooltipFromEvent, Tooltip]\n        )\n        const handleMouseLeave = useCallback(\n            () => isInteractive && hideTooltip(),\n            [isInteractive, hideTooltip]\n        )\n\n        return (\n            <SvgWrapper\n                width={outerWidth}\n                height={outerHeight}\n                margin={margin}\n                theme={theme}\n                defs={boundDefs}\n                role={role}\n            >\n                {layers.map((layer, i) => {\n                    if (layer === 'graticule') {\n                        if (enableGraticule !== true) return null\n\n                        return (\n                            <GeoGraticule\n                                key=\"graticule\"\n                                path={path}\n                                graticule={graticule}\n                                lineWidth={graticuleLineWidth}\n                                lineColor={graticuleLineColor}\n                            />\n                        )\n                    }\n                    if (layer === 'features') {\n                        return (\n                            <Fragment key=\"features\">\n                                {boundFeatures.map(feature => (\n                                    <GeoMapFeature\n                                        key={feature.id}\n                                        feature={feature}\n                                        path={path}\n                                        fillColor={getFillColor(feature)}\n                                        borderWidth={getBorderWidth(feature)}\n                                        borderColor={getBorderColor(feature)}\n                                        onMouseEnter={handleMouseEnter}\n                                        onMouseMove={handleMouseMove}\n                                        onMouseLeave={handleMouseLeave}\n                                        onClick={handleClick}\n                                    />\n                                ))}\n                            </Fragment>\n                        )\n                    }\n                    if (layer === 'legends') {\n                        return legends.map((legend, i) => {\n                            return (\n                                <BoxLegendSvg\n                                    key={i}\n                                    containerWidth={width}\n                                    containerHeight={height}\n                                    data={legendData}\n                                    {...legend}\n                                />\n                            )\n                        })\n                    }\n\n                    return <Fragment key={i}>{layer({})}</Fragment>\n                })}\n            </SvgWrapper>\n        )\n    }\n)\n\nChoropleth.displayName = 'Choropleth'\nChoropleth.propTypes = ChoroplethPropTypes\nChoropleth.defaultProps = ChoroplethDefaultProps\n\nexport default withContainer(Choropleth)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Choropleth from './Choropleth'\n\nconst ResponsiveChoropleth = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Choropleth width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoropleth\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useRef, useEffect, useCallback } from 'react'\nimport { geoContains } from 'd3-geo'\nimport { getRelativeCursor, withContainer, useDimensions, useTheme } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ChoroplethCanvasDefaultProps, ChoroplethCanvasPropTypes } from './props'\nimport { useGeoMap, useChoropleth } from './hooks'\n\nconst getFeatureFromMouseEvent = (event, el, features, projection) => {\n    const [x, y] = getRelativeCursor(el, event)\n\n    return features.find(f => geoContains(f, projection.invert([x, y])))\n}\n\nconst ChoroplethCanvas = memo(\n    ({\n        width,\n        height,\n        margin: partialMargin,\n        pixelRatio,\n        features,\n        data,\n        match,\n        label,\n        value,\n        valueFormat,\n        projectionType,\n        projectionScale,\n        projectionTranslation,\n        projectionRotation,\n        colors,\n        domain,\n        unknownColor,\n        borderWidth,\n        borderColor,\n        enableGraticule,\n        graticuleLineWidth,\n        graticuleLineColor,\n        layers,\n        legends,\n        isInteractive,\n        onClick,\n        onMouseMove,\n        tooltip: Tooltip,\n    }) => {\n        const canvasEl = useRef(null)\n        const theme = useTheme()\n        const { margin, outerWidth, outerHeight } = useDimensions(width, height, partialMargin)\n        const { projection, graticule, path, getBorderWidth, getBorderColor } = useGeoMap({\n            width,\n            height,\n            projectionType,\n            projectionScale,\n            projectionTranslation,\n            projectionRotation,\n            fillColor: () => {},\n            borderWidth,\n            borderColor,\n        })\n        const { getFillColor, boundFeatures, legendData } = useChoropleth({\n            features,\n            data,\n            match,\n            label,\n            value,\n            valueFormat,\n            colors,\n            unknownColor,\n            domain,\n        })\n\n        useEffect(() => {\n            if (!canvasEl) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            path.context(ctx)\n\n            layers.forEach(layer => {\n                if (layer === 'graticule') {\n                    if (enableGraticule === true) {\n                        ctx.lineWidth = graticuleLineWidth\n                        ctx.strokeStyle = graticuleLineColor\n                        ctx.beginPath()\n                        path(graticule())\n                        ctx.stroke()\n                    }\n                } else if (layer === 'features') {\n                    boundFeatures.forEach(feature => {\n                        ctx.beginPath()\n                        path(feature)\n                        ctx.fillStyle = getFillColor(feature)\n                        ctx.fill()\n\n                        const borderWidth = getBorderWidth(feature)\n                        if (borderWidth > 0) {\n                            ctx.strokeStyle = getBorderColor(feature)\n                            ctx.lineWidth = borderWidth\n                            ctx.stroke()\n                        }\n                    })\n                } else if (layer === 'legends') {\n                    legends.forEach(legend => {\n                        renderLegendToCanvas(ctx, {\n                            ...legend,\n                            data: legendData,\n                            containerWidth: width,\n                            containerHeight: height,\n                            theme,\n                        })\n                    })\n                } else {\n                    // layer(ctx, {})\n                }\n            })\n        }, [\n            canvasEl,\n            outerWidth,\n            outerHeight,\n            margin,\n            pixelRatio,\n            theme,\n            path,\n            graticule,\n            getFillColor,\n            getBorderWidth,\n            getBorderColor,\n            boundFeatures,\n            legends,\n            layers,\n        ])\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n        const handleMouseMove = useCallback(\n            event => {\n                if (!isInteractive || !Tooltip) return\n\n                const feature = getFeatureFromMouseEvent(\n                    event,\n                    canvasEl.current,\n                    boundFeatures,\n                    projection\n                )\n                if (feature) {\n                    showTooltipFromEvent(<Tooltip feature={feature} />, event)\n                } else {\n                    hideTooltip()\n                }\n                onMouseMove && onMouseMove(feature || null, event)\n            },\n            [\n                showTooltipFromEvent,\n                hideTooltip,\n                isInteractive,\n                Tooltip,\n                canvasEl,\n                boundFeatures,\n                projection,\n            ]\n        )\n        const handleMouseLeave = useCallback(\n            () => isInteractive && hideTooltip(),\n            [isInteractive, hideTooltip]\n        )\n        const handleClick = useCallback(\n            event => {\n                if (!isInteractive || !onClick) return\n\n                const feature = getFeatureFromMouseEvent(\n                    event,\n                    canvasEl.current,\n                    boundFeatures,\n                    projection\n                )\n                if (feature) {\n                    onClick(feature, event)\n                }\n            },\n            [isInteractive, canvasEl, boundFeatures, projection, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                    cursor: isInteractive ? 'auto' : 'normal',\n                }}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        )\n    }\n)\n\nChoroplethCanvas.displayName = 'ChoroplethCanvas'\nChoroplethCanvas.propTypes = ChoroplethCanvasPropTypes\nChoroplethCanvas.defaultProps = ChoroplethCanvasDefaultProps\n\nexport default withContainer(ChoroplethCanvas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport ChoroplethCanvas from './ChoroplethCanvas'\n\nconst ResponsiveChoroplethCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ChoroplethCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveChoroplethCanvas\n"],"names":["projectionById","azimuthalEqualArea","geoAzimuthalEqualArea","azimuthalEquidistant","geoAzimuthalEquidistant","gnomonic","geoGnomonic","orthographic","geoOrthographic","stereographic","geoStereographic","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","mercator","geoMercator","transverseMercator","geoTransverseMercator","naturalEarth1","geoNaturalEarth1","useGeoMap","_ref","width","height","projectionType","projectionScale","projectionTranslation","projectionRotation","fillColor","borderWidth","borderColor","projection","useMemo","scale","translate","rotate","path","geoPath","graticule","geoGraticule","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","getFillColor","useChoropleth","_ref2","features","data","match","label","value","valueFormat","colors","unknownColor","domain","findMatchingDatum","isFunction","feature","datum","featureKey","get","datumKey","getLabel","getValue","valueFormatter","undefined","d","format","colorScale","guessQuantizeColorScale","boundFeatures","map","find","datumValue","featureWithData","_extends","formattedValue","color","legendData","useQuantizeColorScaleLegendData","ChoroplethTooltip","memo","_jsx","BasicTooltip","id","enableChip","propTypes","PropTypes","object","isRequired","displayName","commonPropTypes","arrayOf","shape","string","type","oneOf","properties","geometry","Object","keys","number","oneOfType","func","inheritedColorPropType","enableGraticule","bool","graticuleLineWidth","graticuleLineColor","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","any","layers","GeoMapPropTypes","role","GeoMapCanvasPropTypes","pixelRatio","commonChoroplethPropTypes","quantizeColorScalePropType","ChoroplethPropTypes","ChoroplethCanvasPropTypes","commonDefaultProps","legends","fill","defs","GeoMapDefaultProps","GeoMapCanvasDefaultProps","window","devicePixelRatio","commonChoroplethDefaultProps","ChoroplethDefaultProps","ChoroplethCanvasDefaultProps","GeoGraticule","lineWidth","lineColor","strokeWidth","stroke","GeoMapFeature","_feature$fill","strokeLinejoin","event","GeoMap","props","partialMargin","margin","Tooltip","_useDimensions","useDimensions","outerWidth","outerHeight","_useGeoMap","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleClick","useCallback","handleMouseEnter","handleMouseMove","handleMouseLeave","SvgWrapper","children","layer","i","Fragment","defaultProps","withContainer","ResponsiveGeoMap","ResponsiveWrapper","getFeatureFromMouseEvent","el","_getRelativeCursor","getRelativeCursor","x","y","f","geoContains","invert","GeoMapCanvas","canvasEl","useRef","useEffect","current","ctx","getContext","fillStyle","background","fillRect","left","top","context","forEach","strokeStyle","beginPath","ref","style","cursor","displatName","ResponsiveGeoMapCanvas","Choropleth","_ref$defs","_ref$fill","_useChoropleth","boundDefs","bindDefs","dataKey","targetKey","legend","BoxLegendSvg","containerWidth","containerHeight","ResponsiveChoropleth","ChoroplethCanvas","renderLegendToCanvas","ResponsiveChoroplethCanvas"],"mappings":"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"}