{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDependencyArrayRef = void 0;\n/**\n * useEffect(\n *    ()=> { ... },\n *    [ { \"foo\": \"bar\" } ]\n * )\n * => The callback will be invoked every render.\n * because { \"foo\": \"bar\" } is a new instance every render.\n *\n * useEffect(\n *    ()=> { ... },\n *    [ getDependencyArrayRef({ \"foo\": \"bar\" }) ]\n * );\n * => The callback will only be invoked once.\n *\n * The optimization will be enabled only if obj is\n * of the form Record<string, string | number | undefined | null>\n * overwise the object is returned (the function is the identity function).\n */\nfunction getDependencyArrayRef(obj) {\n  if (!(obj instanceof Object) || typeof obj === \"function\") {\n    return obj;\n  }\n  var arr = [];\n  for (var key in obj) {\n    var value = obj[key];\n    var typeofValue = typeof value;\n    if (!(typeofValue === \"string\" || typeofValue === \"number\" && !isNaN(value) || typeofValue === \"boolean\" || value === undefined || value === null)) {\n      return obj;\n    }\n    arr.push(\"\".concat(key, \":\").concat(typeofValue, \"_\").concat(value));\n  }\n  return \"xSqLiJdLMd9s\" + arr.join(\"|\");\n}\nexports.getDependencyArrayRef = getDependencyArrayRef;","map":null,"metadata":{},"sourceType":"script"}