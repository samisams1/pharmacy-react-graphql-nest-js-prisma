{"ast":null,"code":"import _classCallCheck from \"/home/samisams/TURING PROJET/PROJECTS/pharmacy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/samisams/TURING PROJET/PROJECTS/pharmacy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nvar defaultMakeData = function defaultMakeData() {\n  return Object.create(null);\n};\n// Useful for processing arguments objects as well as arrays.\nvar _Array$prototype = Array.prototype,\n  forEach = _Array$prototype.forEach,\n  slice = _Array$prototype.slice;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport var Trie = /*#__PURE__*/function () {\n  function Trie() {\n    var weakness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var makeData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMakeData;\n    _classCallCheck(this, Trie);\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n  _createClass(Trie, [{\n    key: \"lookup\",\n    value: function lookup() {\n      for (var _len = arguments.length, array = new Array(_len), _key = 0; _key < _len; _key++) {\n        array[_key] = arguments[_key];\n      }\n      return this.lookupArray(array);\n    }\n  }, {\n    key: \"lookupArray\",\n    value: function lookupArray(array) {\n      var node = this;\n      forEach.call(array, function (key) {\n        return node = node.getChildTrie(key);\n      });\n      return hasOwnProperty.call(node, \"data\") ? node.data : node.data = this.makeData(slice.call(array));\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      for (var _len2 = arguments.length, array = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        array[_key2] = arguments[_key2];\n      }\n      return this.peekArray(array);\n    }\n  }, {\n    key: \"peekArray\",\n    value: function peekArray(array) {\n      var node = this;\n      for (var i = 0, len = array.length; node && i < len; ++i) {\n        var map = this.weakness && isObjRef(array[i]) ? node.weak : node.strong;\n        node = map && map.get(array[i]);\n      }\n      return node && node.data;\n    }\n  }, {\n    key: \"getChildTrie\",\n    value: function getChildTrie(key) {\n      var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n      var child = map.get(key);\n      if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n      return child;\n    }\n  }]);\n  return Trie;\n}();\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}