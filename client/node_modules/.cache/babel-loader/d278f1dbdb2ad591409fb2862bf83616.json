{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMergedClasses = exports.mergeClasses = void 0;\nvar objectKeys_1 = require(\"./tools/objectKeys\");\nvar getDependencyArrayRef_1 = require(\"./tools/getDependencyArrayRef\");\nvar cssAndCx_1 = require(\"./cssAndCx\");\nvar react_1 = require(\"react\");\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\n  //NOTE: We use this test to be resilient in case classesFromProps is not of the expected type.\n  if (!(classesFromProps instanceof Object)) {\n    return classesFromUseStyles;\n  }\n  var out = {};\n  (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(function (ruleName) {\n    return out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName]);\n  });\n  (0, objectKeys_1.objectKeys)(classesFromProps).forEach(function (ruleName) {\n    if (ruleName in classesFromUseStyles) {\n      return;\n    }\n    var className = classesFromProps[ruleName];\n    //...Same here, that why we don't do className === undefined\n    if (typeof className !== \"string\") {\n      return;\n    }\n    out[ruleName] = className;\n  });\n  return out;\n}\nexports.mergeClasses = mergeClasses;\nfunction useMergedClasses(classes, classesOv) {\n  var _ref = (0, cssAndCx_1.useCssAndCx)(),\n    cx = _ref.cx;\n  return (0, react_1.useMemo)(function () {\n    return mergeClasses(classes, classesOv, cx);\n  }, [classes, (0, getDependencyArrayRef_1.getDependencyArrayRef)(classesOv), cx]);\n}\nexports.useMergedClasses = useMergedClasses;","map":null,"metadata":{},"sourceType":"script"}