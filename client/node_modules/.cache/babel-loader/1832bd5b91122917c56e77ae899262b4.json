{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { deepmerge } from '@mui/utils';\nimport propsToClassKey from '../propsToClassKey';\nimport noopTheme from './noopTheme';\nexport default function getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof stylesOrCreator !== 'object' && !themingEnabled) {\n      console.error(['MUI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n  return {\n    create: function create(theme, name) {\n      var styles;\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['MUI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n        throw err;\n      }\n      if (!name || !theme.components || !theme.components[name] || !theme.components[name].styleOverrides && !theme.components[name].variants) {\n        return styles;\n      }\n      var overrides = theme.components[name].styleOverrides || {};\n      var variants = theme.components[name].variants || [];\n      var stylesWithOverrides = _extends({}, styles);\n      Object.keys(overrides).forEach(function (key) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['MUI: You are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.components.\").concat(name, \".styleOverrides`.\"), '', \"If you intentionally wanted to add a new key, please use the theme.components[\".concat(name, \"].variants option.\")].join('\\n'));\n          }\n        }\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key] || {}, overrides[key]);\n      });\n      variants.forEach(function (definition) {\n        var classKey = propsToClassKey(definition.props);\n        stylesWithOverrides[classKey] = deepmerge(stylesWithOverrides[classKey] || {}, definition.style);\n      });\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}","map":null,"metadata":{},"sourceType":"module"}