{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\nvar Concast = function (_super) {\n  __extends(Concast, _super);\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function next(result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          _this.notify(\"next\", result);\n          iterateObserversSafely(_this.observers, \"next\", result);\n        }\n      },\n      error: function error(_error) {\n        var sub = _this.sub;\n        if (sub !== null) {\n          if (sub) setTimeout(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", _error];\n          _this.reject(_error);\n          _this.notify(\"error\", _error);\n          iterateObserversSafely(_this.observers, \"error\", _error);\n        }\n      },\n      complete: function complete() {\n        var _a = _this,\n          sub = _a.sub,\n          _b = _a.sources,\n          sources = _b === void 0 ? [] : _b;\n        if (sub !== null) {\n          var value = sources.shift();\n          if (!value) {\n            if (sub) setTimeout(function () {\n              return sub.unsubscribe();\n            });\n            _this.sub = null;\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n            _this.notify(\"complete\");\n            iterateObserversSafely(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n    _this.nextResultListeners = new Set();\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n      _this.sources = [];\n      _this.handlers.complete();\n    };\n    _this.promise.catch(function (_) {});\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n    return _this;\n  }\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n    }\n  };\n  Concast.prototype.removeObserver = function (observer) {\n    if (this.observers.delete(observer) && this.observers.size < 1) {\n      this.handlers.complete();\n    }\n  };\n  Concast.prototype.notify = function (method, arg) {\n    var nextResultListeners = this.nextResultListeners;\n    if (nextResultListeners.size) {\n      this.nextResultListeners = new Set();\n      nextResultListeners.forEach(function (listener) {\n        return listener(method, arg);\n      });\n    }\n  };\n  Concast.prototype.beforeNext = function (callback) {\n    var called = false;\n    this.nextResultListeners.add(function (method, arg) {\n      if (!called) {\n        called = true;\n        callback(method, arg);\n      }\n    });\n  };\n  return Concast;\n}(Observable);\nexport { Concast };\nfixObservableSubclass(Concast);","map":null,"metadata":{},"sourceType":"module"}