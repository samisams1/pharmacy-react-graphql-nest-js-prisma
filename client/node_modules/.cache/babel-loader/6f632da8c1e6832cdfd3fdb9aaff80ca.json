{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport deprecatedPropType from '../utils/deprecatedPropType';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      height: 48,\n      background: 'rgba(0, 0, 0, 0.5)',\n      display: 'flex',\n      alignItems: 'center',\n      fontFamily: theme.typography.fontFamily\n    },\n    /* Styles applied to the root element if `position=\"bottom\"`. */\n    positionBottom: {\n      bottom: 0\n    },\n    /* Styles applied to the root element if `position=\"top\"`. */\n    positionTop: {\n      top: 0\n    },\n    /* Styles applied to the root element if a `subtitle` is provided. */\n    rootSubtitle: {\n      height: 68\n    },\n    /* Styles applied to the title and subtitle container element. */\n    titleWrap: {\n      flexGrow: 1,\n      marginLeft: 16,\n      marginRight: 16,\n      color: theme.palette.common.white,\n      overflow: 'hidden'\n    },\n    /* Styles applied to the container element if `actionPosition=\"left\"`. */\n    titleWrapActionPosLeft: {\n      marginLeft: 0\n    },\n    /* Styles applied to the container element if `actionPosition=\"right\"`. */\n    titleWrapActionPosRight: {\n      marginRight: 0\n    },\n    /* Styles applied to the title container element. */\n    title: {\n      fontSize: theme.typography.pxToRem(16),\n      lineHeight: '24px',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    },\n    /* Styles applied to the subtitle container element. */\n    subtitle: {\n      fontSize: theme.typography.pxToRem(12),\n      lineHeight: 1,\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    },\n    /* Styles applied to the actionIcon if supplied. */\n    actionIcon: {},\n    /* Styles applied to the actionIcon if `actionPosition=\"left\"`. */\n    actionIconActionPosLeft: {\n      order: -1\n    }\n  };\n};\nvar ImageListItemBar = /*#__PURE__*/React.forwardRef(function ImageListItemBar(props, ref) {\n  var actionIcon = props.actionIcon,\n    _props$actionPosition = props.actionPosition,\n    actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition,\n    classes = props.classes,\n    className = props.className,\n    subtitle = props.subtitle,\n    title = props.title,\n    _props$position = props.position,\n    positionProp = _props$position === void 0 ? 'bottom' : _props$position,\n    titlePosition = props.titlePosition,\n    other = _objectWithoutProperties(props, [\"actionIcon\", \"actionPosition\", \"classes\", \"className\", \"subtitle\", \"title\", \"position\", \"titlePosition\"]);\n  var position = titlePosition || positionProp;\n  var actionPos = actionIcon && actionPosition;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, subtitle && classes.rootSubtitle, {\n      'bottom': classes.positionBottom,\n      'top': classes.positionTop\n    }[position]),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.titleWrap, {\n      'left': classes.titleWrapActionPosLeft,\n      'right': classes.titleWrapActionPosRight\n    }[actionPos])\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.title\n  }, title), subtitle ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.subtitle\n  }, subtitle) : null), actionIcon ? /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)\n  }, actionIcon) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? ImageListItemBar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * An IconButton element to be used as secondary action target\n   * (primary action target is the item itself).\n   */\n  actionIcon: PropTypes.node,\n  /**\n   * Position of secondary action IconButton.\n   */\n  actionPosition: PropTypes.oneOf(['left', 'right']),\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Position of the title bar.\n   */\n  position: PropTypes.oneOf(['bottom', 'top']),\n  /**\n   * String or element serving as subtitle (support text).\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Title to be displayed on item.\n   */\n  title: PropTypes.node,\n  /**\n   * Position of the title bar.\n   * @deprecated Use position instead.\n   */\n  titlePosition: deprecatedPropType(PropTypes.oneOf(['bottom', 'top']), 'Use the `position` prop instead.')\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiImageListItemBar'\n})(ImageListItemBar);","map":null,"metadata":{},"sourceType":"module"}