{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport StepIcon from '../StepIcon';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      '&$alternativeLabel': {\n        flexDirection: 'column'\n      },\n      '&$disabled': {\n        cursor: 'default'\n      }\n    },\n    /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: {},\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {},\n    /* Styles applied to the `Typography` component which wraps `children`. */\n    label: {\n      color: theme.palette.text.secondary,\n      '&$active': {\n        color: theme.palette.text.primary,\n        fontWeight: 500\n      },\n      '&$completed': {\n        color: theme.palette.text.primary,\n        fontWeight: 500\n      },\n      '&$alternativeLabel': {\n        textAlign: 'center',\n        marginTop: 16\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    },\n    /* Pseudo-class applied to the `Typography` component if `active={true}`. */\n    active: {},\n    /* Pseudo-class applied to the `Typography` component if `completed={true}`. */\n    completed: {},\n    /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */\n    error: {},\n    /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */\n    disabled: {},\n    /* Styles applied to the `icon` container element. */\n    iconContainer: {\n      flexShrink: 0,\n      // Fix IE 11 issue\n      display: 'flex',\n      paddingRight: 8,\n      '&$alternativeLabel': {\n        paddingRight: 0\n      }\n    },\n    /* Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`. */\n    alternativeLabel: {},\n    /* Styles applied to the container element which wraps `Typography` and `optional`. */\n    labelContainer: {\n      width: '100%'\n    }\n  };\n};\nvar StepLabel = /*#__PURE__*/React.forwardRef(function StepLabel(props, ref) {\n  var _props$active = props.active,\n    active = _props$active === void 0 ? false : _props$active,\n    _props$alternativeLab = props.alternativeLabel,\n    alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,\n    children = props.children,\n    classes = props.classes,\n    className = props.className,\n    _props$completed = props.completed,\n    completed = _props$completed === void 0 ? false : _props$completed,\n    _props$disabled = props.disabled,\n    disabled = _props$disabled === void 0 ? false : _props$disabled,\n    _props$error = props.error,\n    error = _props$error === void 0 ? false : _props$error,\n    expanded = props.expanded,\n    icon = props.icon,\n    last = props.last,\n    optional = props.optional,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n    StepIconComponentProp = props.StepIconComponent,\n    StepIconProps = props.StepIconProps,\n    other = _objectWithoutProperties(props, [\"active\", \"alternativeLabel\", \"children\", \"classes\", \"className\", \"completed\", \"disabled\", \"error\", \"expanded\", \"icon\", \"last\", \"optional\", \"orientation\", \"StepIconComponent\", \"StepIconProps\"]);\n  var StepIconComponent = StepIconComponentProp;\n  if (icon && !StepIconComponent) {\n    StepIconComponent = StepIcon;\n  }\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    className: clsx(classes.root, classes[orientation], className, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),\n    ref: ref\n  }, other), icon || StepIconComponent ? /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.iconContainer, alternativeLabel && classes.alternativeLabel)\n  }, /*#__PURE__*/React.createElement(StepIconComponent, _extends({\n    completed: completed,\n    active: active,\n    error: error,\n    icon: icon\n  }, StepIconProps))) : null, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.labelContainer\n  }, children ? /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"span\",\n    display: \"block\",\n    className: clsx(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error)\n  }, children) : null, optional));\n});\nprocess.env.NODE_ENV !== \"production\" ? StepLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * In most cases will simply be a string containing a title for the label.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Mark the step as disabled, will also disable the button if\n   * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Mark the step as failed.\n   */\n  error: PropTypes.bool,\n  /**\n   * Override the default label of the step icon.\n   */\n  icon: PropTypes.node,\n  /**\n   * The optional node to display.\n   */\n  optional: PropTypes.node,\n  /**\n   * The component to render in place of the [`StepIcon`](/api/step-icon/).\n   */\n  StepIconComponent: PropTypes.elementType,\n  /**\n   * Props applied to the [`StepIcon`](/api/step-icon/) element.\n   */\n  StepIconProps: PropTypes.object\n} : void 0;\nStepLabel.muiName = 'StepLabel';\nexport default withStyles(styles, {\n  name: 'MuiStepLabel'\n})(StepLabel);","map":null,"metadata":{},"sourceType":"module"}