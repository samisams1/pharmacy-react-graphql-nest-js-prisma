{"ast":null,"code":"import { SYMBOL_ITERATOR } from \"./symbols.mjs\";\n\n/* eslint-disable no-redeclare */\n// $FlowFixMe[name-already-bound]\nvar arrayFrom = Array.from || function (obj, mapFn, thisArg) {\n  if (obj == null) {\n    throw new TypeError('Array.from requires an array-like object - not null or undefined');\n  } // Is Iterable?\n\n  var iteratorMethod = obj[SYMBOL_ITERATOR];\n  if (typeof iteratorMethod === 'function') {\n    var iterator = iteratorMethod.call(obj);\n    var result = [];\n    var step;\n    for (var i = 0; !(step = iterator.next()).done; ++i) {\n      result.push(mapFn.call(thisArg, step.value, i)); // Infinite Iterators could cause forEach to run forever.\n      // After a very large number of iterations, produce an error.\n      // istanbul ignore if (Too big to actually test)\n\n      if (i > 9999999) {\n        throw new TypeError('Near-infinite iteration.');\n      }\n    }\n    return result;\n  } // Is Array like?\n\n  var length = obj.length;\n  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {\n    var _result = [];\n    for (var _i = 0; _i < length; ++_i) {\n      if (Object.prototype.hasOwnProperty.call(obj, _i)) {\n        _result.push(mapFn.call(thisArg, obj[_i], _i));\n      }\n    }\n    return _result;\n  }\n  return [];\n};\nexport default arrayFrom;","map":null,"metadata":{},"sourceType":"module"}