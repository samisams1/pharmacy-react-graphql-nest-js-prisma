{"ast":null,"code":"export var filterBreakpointKeys = function filterBreakpointKeys(breakpointsKeys, responsiveKeys) {\n  return breakpointsKeys.filter(function (key) {\n    return responsiveKeys.includes(key);\n  });\n};\nexport var traverseBreakpoints = function traverseBreakpoints(breakpoints, responsive, iterator) {\n  var smallestBreakpoint = breakpoints.keys[0]; // the keys is sorted from smallest to largest by `createBreakpoints`.\n\n  if (Array.isArray(responsive)) {\n    responsive.forEach(function (breakpointValue, index) {\n      iterator(function (responsiveStyles, style) {\n        if (index <= breakpoints.keys.length - 1) {\n          if (index === 0) {\n            Object.assign(responsiveStyles, style);\n          } else {\n            responsiveStyles[breakpoints.up(breakpoints.keys[index])] = style;\n          }\n        }\n      }, breakpointValue);\n    });\n  } else if (responsive && typeof responsive === 'object') {\n    // prevent null\n    // responsive could be a very big object, pick the smallest responsive values\n\n    var keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));\n    keys.forEach(function (key) {\n      if (breakpoints.keys.indexOf(key) !== -1) {\n        // @ts-ignore already checked that responsive is an object\n        var breakpointValue = responsive[key];\n        if (breakpointValue !== undefined) {\n          iterator(function (responsiveStyles, style) {\n            if (smallestBreakpoint === key) {\n              Object.assign(responsiveStyles, style);\n            } else {\n              responsiveStyles[breakpoints.up(key)] = style;\n            }\n          }, breakpointValue);\n        }\n      }\n    });\n  } else if (typeof responsive === 'number' || typeof responsive === 'string') {\n    iterator(function (responsiveStyles, style) {\n      Object.assign(responsiveStyles, style);\n    }, responsive);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}