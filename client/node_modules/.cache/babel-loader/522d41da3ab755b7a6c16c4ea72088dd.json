{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport useTheme from '../styles/useTheme';\nvar styles = function styles(theme) {\n  var hidden = {\n    display: 'none'\n  };\n  return theme.breakpoints.keys.reduce(function (acc, key) {\n    acc[\"only\".concat(capitalize(key))] = _defineProperty({}, theme.breakpoints.only(key), hidden);\n    acc[\"\".concat(key, \"Up\")] = _defineProperty({}, theme.breakpoints.up(key), hidden);\n    acc[\"\".concat(key, \"Down\")] = _defineProperty({}, theme.breakpoints.down(key), hidden);\n    return acc;\n  }, {});\n};\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenCss(props) {\n  var children = props.children,\n    classes = props.classes,\n    className = props.className,\n    only = props.only,\n    other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"only\"]);\n  var theme = useTheme();\n  if (process.env.NODE_ENV !== 'production') {\n    var unknownProps = Object.keys(other).filter(function (propName) {\n      var isUndeclaredBreakpoint = !theme.breakpoints.keys.some(function (breakpoint) {\n        return \"\".concat(breakpoint, \"Up\") === propName || \"\".concat(breakpoint, \"Down\") === propName;\n      });\n      return isUndeclaredBreakpoint;\n    });\n    if (unknownProps.length > 0) {\n      console.error(\"Material-UI: Unsupported props received by `<Hidden implementation=\\\"css\\\" />`: \".concat(unknownProps.join(', '), \". Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?\"));\n    }\n  }\n  var clsx = [];\n  if (className) {\n    clsx.push(className);\n  }\n  for (var i = 0; i < theme.breakpoints.keys.length; i += 1) {\n    var breakpoint = theme.breakpoints.keys[i];\n    var breakpointUp = props[\"\".concat(breakpoint, \"Up\")];\n    var breakpointDown = props[\"\".concat(breakpoint, \"Down\")];\n    if (breakpointUp) {\n      clsx.push(classes[\"\".concat(breakpoint, \"Up\")]);\n    }\n    if (breakpointDown) {\n      clsx.push(classes[\"\".concat(breakpoint, \"Down\")]);\n    }\n  }\n  if (only) {\n    var onlyBreakpoints = Array.isArray(only) ? only : [only];\n    onlyBreakpoints.forEach(function (breakpoint) {\n      clsx.push(classes[\"only\".concat(capitalize(breakpoint))]);\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx.join(' ')\n  }, children);\n}\nprocess.env.NODE_ENV !== \"production\" ? HiddenCss.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n  /**\n   * If `true`, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n  /**\n   * If `true`, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'PrivateHiddenCss'\n})(HiddenCss);","map":null,"metadata":{},"sourceType":"module"}